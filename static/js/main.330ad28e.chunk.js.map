{"version":3,"sources":["features/DeviceDetail.tsx","features/DeviceInfo.tsx","features/Items.tsx","features/nav/NavBar.tsx","app/layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["DeviceDetail","Segment","style","overflow","maxHeight","Form","Field","Label","size","Input","type","placeholder","Divider","inline","className","TextArea","DeviceInfo","useState","state","setState","onClick","Confirm","open","header","content","onCancel","onConfirm","Items","Container","overflowWhenOpen","trigger","NavBar","Menu","fixed","inverted","Item","Button","primary","toggle","position","positive","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.330ad28e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Divider,\r\n  Form,\r\n  Input,\r\n  Label,\r\n  Segment,\r\n  TextArea,\r\n} from \"semantic-ui-react\";\r\n\r\nexport const DeviceDetail = () => {\r\n  return (\r\n    <Segment style={{ overflow: \"scroll\", maxHeight: \"80%\" }}>\r\n      <Form>\r\n        <Form.Field>\r\n          <Label size=\"huge\">客戶名稱</Label>\r\n          <Input type=\"text\" placeholder=\"請輸入客戶名稱\" />\r\n        </Form.Field>\r\n        <Divider />\r\n\r\n        <Form.Field inline>\r\n          <Label>購買日期</Label>\r\n          <Input type=\"date\" />\r\n          <Label>機型</Label>\r\n          <Input type=\"text\" placeholder=\"請輸入機型\" />\r\n          <Label>型號</Label>\r\n          <Input type=\"text\" placeholder=\"請輸入型號\" />\r\n        </Form.Field>\r\n        <Divider />\r\n\r\n        <Form.Field>\r\n          <Label size=\"huge\">維護模式</Label>\r\n        </Form.Field>\r\n        <Form.Field inline>\r\n          <Label>保固</Label>\r\n          <Input type=\"date\" />\r\n          <Input type=\"date\" />\r\n        </Form.Field>\r\n        <Form.Field inline>\r\n          <Label>租賃</Label>\r\n          <Input type=\"date\" />\r\n          <Input type=\"date\" />\r\n        </Form.Field>\r\n        <Form.Field inline>\r\n          <Label>保養</Label>\r\n          <Input type=\"date\" />\r\n          <Input type=\"date\" />\r\n        </Form.Field>\r\n        <Divider />\r\n\r\n        <Form.Field className=\"form field record\">\r\n          <Label>保養紀錄</Label>\r\n          <Form.Field inline>\r\n            <Input type=\"date\" />\r\n            <TextArea placeholder=\"請輸入保養紀錄\" />\r\n          </Form.Field>\r\n          <Label>維修紀錄</Label>\r\n          <Form.Field inline>\r\n            <Input type=\"date\" />\r\n            <TextArea placeholder=\"請輸入維修紀錄\" />\r\n          </Form.Field>\r\n          <Label>改版紀錄</Label>\r\n          <Form.Field inline>\r\n            <Input type=\"date\" />\r\n            <TextArea placeholder=\"請輸入改版紀錄\" />\r\n          </Form.Field>\r\n        </Form.Field>\r\n      </Form>\r\n    </Segment>\r\n  );\r\n};\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { Confirm } from \"semantic-ui-react\";\r\nimport { DeviceDetail } from \"./DeviceDetail\";\r\n\r\nexport const DeviceInfo = () => {\r\n  const sn = \"123\";\r\n  const model = \"RL-750s\";\r\n\r\n  const [state, setState] = useState(false);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"deviceInfo\" onClick={() => setState(true)}>\r\n        {`序號: ${sn}\\t機型: ${model}`}\r\n      </div>\r\n      <Confirm\r\n        open={state}\r\n        header=\"裝置資訊\"\r\n        content={<DeviceDetail />}\r\n        onCancel={() => setState(false)}\r\n        onConfirm={() => setState(false)}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Collapsible from \"react-collapsible\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport { DeviceInfo } from \"./DeviceInfo\";\r\n\r\nexport const Items = () => {\r\n  return (\r\n    <Container>\r\n      <Collapsible overflowWhenOpen=\"scroll\" trigger=\"客戶A\">\r\n        <DeviceInfo />\r\n        <DeviceInfo />\r\n        <DeviceInfo />\r\n        <DeviceInfo />\r\n        <DeviceInfo />\r\n        <DeviceInfo />\r\n      </Collapsible>\r\n      <Collapsible trigger=\"客戶B\">\r\n        <DeviceInfo />\r\n        <DeviceInfo />\r\n      </Collapsible>\r\n    </Container>\r\n  );\r\n};\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { Menu, Button, Confirm } from \"semantic-ui-react\";\r\nimport { DeviceDetail } from \"../DeviceDetail\";\r\n\r\nconst NavBar = () => {\r\n  const isLogin = true;\r\n\r\n  const [state, setState] = useState(false);\r\n\r\n  return (\r\n    <Menu fixed=\"top\" inverted>\r\n      <Menu.Item header>裝置保養管理</Menu.Item>\r\n      <Menu.Item>\r\n        {isLogin ? (\r\n          <Fragment>\r\n            <Button primary toggle onClick={() => setState(true)}>\r\n              新增\r\n            </Button>\r\n            <Confirm\r\n              open={state}\r\n              header=\"新增裝置\"\r\n              content={<DeviceDetail />}\r\n              onCancel={() => setState(false)}\r\n              onConfirm={() => setState(false)}\r\n            />\r\n          </Fragment>\r\n        ) : null}\r\n      </Menu.Item>\r\n      <Menu.Item position=\"right\">\r\n        <Button positive content=\"登入\" />\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Items } from \"../../features/Items\";\r\nimport NavBar from \"../../features/nav/NavBar\";\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <NavBar />\r\n        <Items />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./app/layout/App\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./app/layout/styles.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}